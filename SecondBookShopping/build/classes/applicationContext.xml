<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">
        
       <!--  spring自动扫描业务层代码 -->
     <context:component-scan base-package="bookShopping">
      <context:include-filter type="annotation"
			expression="org.aspectj.lang.annotation.Aspect"/>
     </context:component-scan>
     
     <!-- 配置支持annotation注解方式 -->
     <context:annotation-config/>
     
     <!-- 配置aop的annotation注解方式 -->
     <aop:aspectj-autoproxy/>
     
     
     <!-- datasource数据源配置，使用的是c3p0连接池 -->
     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://127.0.0.1:3306/bookshoppingdb"
		p:user="root"
		p:password=""
		p:maxPoolSize="40"
		p:minPoolSize="2"
		p:initialPoolSize="2"
		p:maxIdleTime="20"/>
    <!-- datasource数据源配置，使用的是c3p0连接池 -->
		
    <!-- 配置sessionFactory对象	 -->	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingResources">
			<list>
				<value>bookShopping/model/Book.hbm.xml</value>
				<value>bookShopping/model/Admin.hbm.xml</value>
				<value>bookShopping/model/User.hbm.xml</value>
				<value>bookShopping/model/Cate.hbm.xml</value>
				<value>bookShopping/model/Pro.hbm.xml</value>
				<value>bookShopping/model/Comment.hbm.xml</value>
				<value>bookShopping/model/Cart.hbm.xml</value> 
				<value>bookShopping/model/Order.hbm.xml</value>
				<value>bookShopping/model/Orderdata.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                <!-- 设置自动创建|更新|验证数据库表结构 -->
                hibernate.hbm2ddl.auto=update
                <!-- 是否在控制台显示sql -->
                hibernate.show_sql=true
                <!-- 是否格式化sql，优化显示 -->
                hibernate.format_sql=true
                <!-- 是否开启二级缓存 -->
                hibernate.cache.use_second_level_cache=false
                <!-- 是否开启查询缓存 -->
                hibernate.cache.use_query_cache=false
                <!-- 数据库批量查询最大数 -->
                hibernate.jdbc.fetch_size=50
                <!-- 数据库批量更新、添加、删除操作最大数 -->
                hibernate.jdbc.batch_size=50
                <!-- 是否自动提交事务 -->
                hibernate.connection.autocommit=true
                <!-- 指定hibernate在何时释放JDBC连接 -->
                hibernate.connection.release_mode=auto
                <!-- 创建session方式 hibernate4.x 的方式 -->
                hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
                <!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
                    所以把它设置为none即可 -->
                javax.persistence.validation.mode=none
			</value>
		</property>
	</bean>
	<!-- 配置sessionFactory对象	 -->	
	
	
	<!-- 配置事务对象 -->
     <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
     </bean>
     
      <!--      配置通知 -->
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
		
		<tx:attributes>
			
			<tx:method name="get*"/>
			
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置通知 -->
	
	<!-- 配置切入点，并把通知与切入点进行关联起来 -->
	<aop:config>
		<aop:pointcut id="myPointCut" expression="execution(* bookShopping.service.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointCut"/>
	</aop:config>
	<!-- 配置切入点，并把通知与切入点进行关联起来 -->
	<!-- 配置DAO的类 -->
	<bean id="parentDao" abstract="true">
	   <property name="sessionFactory" ref="sessionFactory" ></property>
	</bean>
	<bean id="baseDao" abstract="true">
	  <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="bookDao" class="bookShopping.dao.imp.BookDao" parent="parentDao">
	</bean>
	<bean id="bookDao1" class="bookShopping.dao.imp.BookDao" parent="parentDao">
	</bean>
	<bean id="adminDao" class="bookShopping.dao.imp.AdminDao" parent="parentDao">
	</bean>
	<bean id="userDao" class="bookShopping.dao.imp.UserDao" parent="parentDao">
	</bean>
	<bean id="cateDao" class="bookShopping.dao.imp.CateDao" parent="parentDao">
	</bean>
	<bean id="proDao" class="bookShopping.dao.imp.ProDao" parent="parentDao">
	</bean>
	<bean id="commentDao" class="bookShopping.dao.imp.CommentDao" parent="parentDao">
	</bean>
	<bean id="cartDao" class="bookShopping.dao.imp.CartDao" parent="parentDao">
	</bean>
	<bean id="orderDao" class="bookShopping.dao.imp.OrderDao" parent="parentDao">
	</bean>
	<bean id="orderdataDao" class="bookShopping.dao.imp.OrderdataDao" parent="parentDao">
	</bean>
	
	<!-- 配置业务层的类 -->
	<bean id="adminService" class="bookShopping.service.imp.AdminService">
	      <property name="adminDao" ref="adminDao"/>
	</bean>
	<bean id="userService" class="bookShopping.service.imp.UserService">
	      <property name="userDao" ref="userDao"/>
	</bean>
	<bean id="cateService" class="bookShopping.service.imp.CateService">
	      <property name="cateDao" ref="cateDao"/>
	</bean>
	<bean id="proService" class="bookShopping.service.imp.ProService">
	      <property name="proDao" ref="proDao"/>
	</bean>
	 <bean id="commentService" class="bookShopping.service.imp.CommentService">
	      <property name="commentDao" ref="commentDao"/>
	</bean> <bean id="cartService" class="bookShopping.service.imp.CartService">
	      <property name="cartDao" ref="cartDao"/>
	</bean>
	 <bean id="orderService" class="bookShopping.service.imp.OrderService">
	      <property name="orderDao" ref="orderDao"/>
	</bean>
	<bean id="orderdataService" class="bookShopping.service.imp.OrderdataService">
	      <property name="orderdataDao" ref="orderdataDao"/>
	</bean>
	
	<!-- 配置Action的类 -->
	<bean id="adminAction" class="bookShopping.action.AdminAction" scope="prototype">
	      <property name="adminService" ref="adminService"/>
	</bean>
	<bean id="userAction" class="bookShopping.action.UserAction" scope="prototype">
	      <property name="userService" ref="userService"/>
	</bean>
	<bean id="cateAction" class="bookShopping.action.CateAction" scope="prototype">
	      <property name="cateService" ref="cateService"/>
	</bean>
	<bean id="proAction" class="bookShopping.action.ProAction" scope="prototype">
	      <property name="proService" ref="proService"/>
	      <property name="cateService" ref="cateService"/>
	</bean>
	<bean id="indexAction" class="bookShopping.action.IndexAction" scope="prototype">
	      <property name="proService" ref="proService"/>
	      <property name="cateService" ref="cateService"/>
	</bean>
    <bean id="commentAction" class="bookShopping.action.CommentAction" scope="prototype">
	      <property name="commentService" ref="commentService"/>
	</bean>
	<bean id="cartAction" class="bookShopping.action.CartAction" scope="prototype">
	      <property name="cartService" ref="cartService"/>
	      <property name="userService" ref="userService"/>
	</bean>
	 <bean id="orderAction" class="bookShopping.action.OrderAction" scope="prototype">
	      <property name="orderService" ref="orderService"/>
	      <property name="cartService" ref="cartService"/>
	      <property name="orderdataService" ref="orderdataService"/>
	</bean>
	<bean id="orderdataAction" class="bookShopping.action.OrderdataAction" scope="prototype">
	      <property name="orderdataService" ref="orderdataService"/>  
	</bean>
    
</beans>